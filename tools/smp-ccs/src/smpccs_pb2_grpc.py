# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import smpccs_pb2 as smpccs__pb2


class SmpFsmControlStub(object):
  """Definition of the gRPC server
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.PingPong = channel.unary_unary(
        '/SmpFsmControl/PingPong',
        request_serializer=smpccs__pb2.Ping.SerializeToString,
        response_deserializer=smpccs__pb2.Pong.FromString,
        )
    self.ControlFsm = channel.unary_stream(
        '/SmpFsmControl/ControlFsm',
        request_serializer=smpccs__pb2.FsmRegistration.SerializeToString,
        response_deserializer=smpccs__pb2.FsmAction.FromString,
        )


class SmpFsmControlServicer(object):
  """Definition of the gRPC server
  """

  def PingPong(self, request, context):
    """A simple RPC to test things.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ControlFsm(self, request, context):
    """A server-to-client streaming RPC.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SmpFsmControlServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'PingPong': grpc.unary_unary_rpc_method_handler(
          servicer.PingPong,
          request_deserializer=smpccs__pb2.Ping.FromString,
          response_serializer=smpccs__pb2.Pong.SerializeToString,
      ),
      'ControlFsm': grpc.unary_stream_rpc_method_handler(
          servicer.ControlFsm,
          request_deserializer=smpccs__pb2.FsmRegistration.FromString,
          response_serializer=smpccs__pb2.FsmAction.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'SmpFsmControl', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
